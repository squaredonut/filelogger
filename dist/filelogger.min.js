/*!
 * fileLogger
 * Copyright 2015 Peter Bakondy https://github.com/pbakondy
 * See LICENSE in this repository for license information
 */
!function(){angular.module("fileLogger",["ngCordova.plugins.file"]).factory("$fileLogger",["$q","$window","$cordovaFile","$timeout","$filter",function(e,o,r,n,t){"use strict";function a(){return!o.cordova&&!o.PhoneGap}function i(e){angular.isString(e)?(e=e.toUpperCase(),-1===O.indexOf(e)&&(e="INFO")):e="INFO";for(var o,r=new Date,n=m?t("date")(r,m,F):r.toJSON(),i=Array.prototype.slice.call(arguments,1),c=[n,e],s=0;s<i.length;s++)if(angular.isArray(i[s])){o="[Array]";try{o=JSON.stringify(i[s])}catch(u){}c.push(o)}else if(angular.isObject(i[s])){o="[Object]";try{o=JSON.stringify(i[s])}catch(u){}c.push(o)}else c.push(i[s]);if(a()){if(i.unshift(n),angular.isObject(console)&&angular.isFunction(console.log))switch(e){case"DEBUG":angular.isFunction(console.debug)?console.debug.apply(console,i):console.log.apply(console,i);break;case"INFO":angular.isFunction(console.debug)?console.info.apply(console,i):console.log.apply(console,i);break;case"WARN":angular.isFunction(console.debug)?console.warn.apply(console,i):console.log.apply(console,i);break;case"ERROR":angular.isFunction(console.debug)?console.error.apply(console,i):console.log.apply(console,i);break;default:console.log.apply(console,i)}}else console.log(c.join(" "));b.push({message:c.join(" ")+"\n"}),S||l()}function l(){if(!b.length)return void(S=!1);S=!0;var e=b.shift();c(e.message).then(function(){n(function(){l()})},function(){n(function(){l()})})}function c(n){var t=e.defer();if(a())o.localStorage[j]||(o.localStorage[j]=""),o.localStorage[j]+=n,t.resolve();else{if(!cordova.file&&!cordova.file.dataDirectory)return t.reject("cordova.file.dataDirectory is not available yet."),t.promise;r.checkFile(cordova.file.dataDirectory,j).then(function(e){e.size>5e6?r.writeFile(cordova.file.dataDirectory,j,n,!0).then(function(){t.resolve()},function(e){t.reject(e)}):r.writeExistingFile(cordova.file.dataDirectory,j,n).then(function(){t.resolve()},function(e){t.reject(e)})},function(){r.writeFile(cordova.file.dataDirectory,j,n,!0).then(function(){t.resolve()},function(e){t.reject(e)})})}return t.promise}function s(){var n=e.defer();return a()?n.resolve(o.localStorage[j]):r.readAsText(cordova.file.dataDirectory,j).then(function(e){n.resolve(e)},function(e){n.reject(e)}),n.promise}function u(){var n=e.defer();return a()?(o.localStorage.removeItem(j),n.resolve()):r.removeFile(cordova.file.dataDirectory,j).then(function(e){n.resolve(e)},function(e){n.reject(e)}),n.promise}function f(e){return angular.isString(e)&&e.length>0?(j=e,!0):!1}function g(e,o){if(!angular.isUndefined(e)&&!angular.isString(e))throw new TypeError("format parameter must be a string or undefined");if(!angular.isUndefined(o)&&!angular.isString(o))throw new TypeError("timezone parameter must be a string or undefined");m=e,F=o}function p(){var n=e.defer();return a()?n.resolve({name:j,localURL:"localStorage://localhost/"+j,type:"text/plain",size:o.localStorage[j]?o.localStorage[j].length:0}):r.checkFile(cordova.file.dataDirectory,j).then(function(e){e.file(n.resolve,n.reject)},n.reject),n.promise}function d(){var e=Array.prototype.slice.call(arguments,0);e.unshift("DEBUG"),i.apply(void 0,e)}function y(){var e=Array.prototype.slice.call(arguments,0);e.unshift("INFO"),i.apply(void 0,e)}function v(){var e=Array.prototype.slice.call(arguments,0);e.unshift("WARN"),i.apply(void 0,e)}function h(){var e=Array.prototype.slice.call(arguments,0);e.unshift("ERROR"),i.apply(void 0,e)}var m,F,b=[],S=!1,O=["DEBUG","INFO","WARN","ERROR"],j="messages.log";return{log:i,getLogfile:s,deleteLogfile:u,setStorageFilename:f,setTimestampFormat:g,checkFile:p,debug:d,info:y,warn:v,error:h}}])}();